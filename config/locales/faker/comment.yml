en:
  faker:
    comment:
      positive:
        - "Excellent Ruby and Rails implementation; clean code and SOLID principles with clear API docs."
        - "Great performance with Sidekiq and Redis; scalable design and fast response times."
        - "PostgreSQL indexing and caching improved throughput; outstanding reliability overall."
        - "Well-structured REST API, comprehensive RSpec tests, and maintainable Rails services."
        - "Clear documentation and robust CI; Ruby code is idiomatic and easy to extend."
        - "Cache hits and latency reductions are impressive; Sidekiq queues are well prioritized."
        - "Strong domain modeling in Rails with PORO services; excellent error handling and logging."
        - "API pagination and filtering are spot on; performance tuning with PostgreSQL worked great."
        - "Great DX: consistent naming, clean architecture, and predictable Rails conventions."
        - "Observability is solid: metrics, tracing, and logs help diagnose performance bottlenecks."
      negative:
        - "Poor performance under load; Rails endpoints lack caching and Redis is misconfigured."
        - "Inconsistent API responses and weak validation; missing RSpec tests and coverage."
        - "Inefficient queries on PostgreSQL; no indexes and high latency on critical endpoints."
        - "Sidekiq jobs retry endlessly; error handling and backoff strategy need improvement."
        - "Unclear documentation and adâ€‘hoc services; Ruby code violates SOLID and is hard to maintain."
      neutral:
        - "Standard Rails CRUD with REST endpoints; behavior matches the documentation."
        - "Basic Sidekiq integration and Redis cache; nothing remarkable but it works."
        - "Conventional PostgreSQL schema with common indexes; acceptable performance."
        - "Typical RSpec setup and factories; tests cover the main API paths."
        - "Usual Rails configs and ENV management; deployment seems straightforward."
